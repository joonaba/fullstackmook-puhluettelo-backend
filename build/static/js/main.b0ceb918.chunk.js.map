{"version":3,"sources":["services/person.js","components/PersonList.js","components/AddPersonForm.js","components/Filter.js","components/CountryList.js","services/country.js","components/ErrorMessage.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","then","response","data","newObject","post","id","delete","PersonList","props","useState","console","log","name","person","number","Table","striped","bordered","hover","map","key","Button","variant","onClick","deletePerson","AddPersonForm","Form","onSubmit","addPerson","Group","controlId","Label","Control","type","placeholder","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","Filter","inline","InputGroup","className","newFilter","handleFilterChange","Append","setShowAll","showAll","Countries","getAllCountries","Notification","message","App","persons","setPersons","countries","setCountries","setNewName","setNewNumber","setNewFilter","errorMessage","setErrorMessage","useEffect","personService","initialPersons","personSearch","filter","Navbar","bg","Brand","href","event","target","class","preventDefault","personObject","includes","alert","addedPerson","concat","setTimeout","catch","error","countryService","allCountries","country","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0ceb918.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n\r\nconst getAll = () => {\r\n\r\n   const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst add = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    const request = axios.delete('/api/persons/'+id)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { \r\n    getAll: getAll, \r\n    add: add,\r\n    deletePerson: deletePerson\r\n  }","import React, { useState } from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport person from '../services/person'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst PersonList = (props) => {\r\n    const [ newName, setNewName ] = useState('')\r\n    const [ newNumber, setNewNumber ] = useState('')\r\n    console.log(props)\r\n    const name = props.person.name\r\n    const number = props.person.number\r\n    const id = props.person.id\r\n  console.log({name})\r\n        return (\r\n          <Table striped bordered hover>\r\n            <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Number</th>\r\n                <th>Delete</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {props.person.map(person => \r\n              <tr key ={person.id}>\r\n                <th>{person.name}</th>\r\n                <th>{person.number}</th>\r\n                <th><Button variant=\"dark\" onClick={() => props.deletePerson(person.id)} >Delete</Button></th>\r\n              </tr>\r\n              )}\r\n            </tbody>\r\n          \r\n        \r\n        </Table>\r\n              )\r\n  }\r\n\r\n  export default PersonList\r\n\r\n","import React, { useState } from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst AddPersonForm = (props) => {\r\n  \r\nreturn (\r\n  <Form onSubmit={props.addPerson}>\r\n  <Form.Group controlId=\"formBasicName\">\r\n    <Form.Label>Name</Form.Label>\r\n    <Form.Control type=\"name\" placeholder=\"Enter name\" value={props.newName} onChange={props.handleNameChange}  />\r\n    \r\n  </Form.Group>\r\n\r\n  <Form.Group controlId=\"formBasicNumber\">\r\n    <Form.Label>Number</Form.Label>\r\n    <Form.Control type=\"text\" placeholder=\"Enter number\" value={props.newNumber} onChange={props.handleNumberChange}/>\r\n  </Form.Group>\r\n  \r\n  <Button variant=\"primary\" type=\"submit\">\r\n    Submit\r\n  </Button>\r\n</Form>\r\n)\r\n}\r\n  export default AddPersonForm\r\n\r\n/*\r\n  <form onSubmit={props.addPerson}>\r\n    <div>\r\n      name: <input\r\n      value={props.newName}\r\n      onChange={props.handleNameChange}\r\n      />\r\n      number: <input\r\n      value={props.newNumber}\r\n      onChange={props.handleNumberChange}\r\n      />\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n  </form>\r\n\r\n  */","import React, { useState } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\n\r\n\r\nconst Filter = (props) => {\r\n\r\n    return (\r\n    <div>\r\n      <Form inline>\r\n      <InputGroup className=\"mb-3\">\r\n    <Form.Control\r\n      placeholder=\"Filter by name\"\r\n      value={props.newFilter}\r\n      onChange={props.handleFilterChange}\r\n      \r\n    />\r\n    <InputGroup.Append>\r\n    <Button variant=\"light\" onClick={() => props.setShowAll(!props.showAll)}>Filter</Button>\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\n\r\n  </Form>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Filter\r\n\r\n/*\r\nSearch: <input\r\nvalue={props.newFilter}\r\nonChange={props.handleFilterChange}\r\n/>\r\n<Button variant=\"light\" onClick={() => props.setShowAll(!props.showAll)}>Search</Button>\r\n*/","import React, { useState } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nconst Countries = (props) => {\r\n\r\n\r\n  \r\n          return (\r\n            \r\n            <div>\r\n              \r\n              <Button variant=\"primary\" onClick={() => props.getAllCountries()}>Search countries</Button>\r\n              \r\n          </div>\r\n                )\r\n    \r\n\r\n}\r\n\r\nexport default Countries\r\n\r\n","import axios from 'axios'\r\nconst baseUrl = 'https://restcountries.eu/rest/v2/all'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n   return request.then(response => response.data)\r\n}\r\n\r\n\r\n\r\nexport default { \r\n    getAll: getAll, \r\n\r\n  }","import React, { useState } from 'react'\r\nimport './error.css'\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification;","import React, { useState, useEffect } from 'react'\nimport PersonList from './components/PersonList.js'\nimport AddPersonForm from './components/AddPersonForm.js'\nimport Filter from './components/Filter.js'\nimport axios from 'axios'\nimport Countries from './components/CountryList.js'\nimport personService from './services/person.js'\nimport countryService from './services/country.js'\nimport Notification from './components/ErrorMessage.js'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Container from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ countries, setCountries] = useState([\n    \n  ]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ showAll, setShowAll ] = useState(true)\n  const [newFilter, setNewFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    console.log('effect')\n    personService\n      .getAll()\n      .then(initialPersons => {\n        console.log('promise fulfilled')\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const getAllCountries = () => {\n    countryService\n      .getAll()\n      .then(allCountries => {\n        setCountries(allCountries)\n      })\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    const allnames = persons.map(person => person.name)\n    const alreadyused = allnames.includes(newName)\n    \n    if (alreadyused === true){\n      alert(`${newName} is already added to phonebook`)\n  } else {\n    personService\n      .add(personObject)\n      .then(addedPerson => {\n        setPersons(persons.concat(addedPerson)) \n        setNewName('')\n        setErrorMessage(\n          `Added:'${newName}' to the server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n      \n  }\n  }\n\n  const deletePerson = (id) => {\n    console.log('tässä id' + id)\n    personService\n    \n      .deletePerson(id)\n      \n      personService\n        .getAll()\n        .then(initialPersons => {\n          console.log('promise fulfilled')\n          setPersons(initialPersons)\n          setErrorMessage(\n            `Person with id:'${id}' is deleted`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n        .catch(error => {\n       \n      })\n  }\n\n  const personSearch = showAll\n  ? persons\n  : persons.filter(person => person.name === newFilter)\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  return (\n    <div>\n      \n  <Navbar bg=\"dark\" variant=\"dark\" >\n    <Navbar.Brand href=\"#\">Phonebook</Navbar.Brand>\n    <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} setShowAll={setShowAll} showAll={showAll} />\n  </Navbar>\n\n      <Notification message={errorMessage} />\n\n      <div class=\"container\">\n        <h2>Add person</h2>\n          <AddPersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange}/>\n\n        <h3>Numbers</h3>\n         <PersonList person={personSearch} deletePerson={deletePerson} />\n         \n        <h4>Countries</h4>\n          <Countries  getAllCountries={getAllCountries}/>\n            <ul>\n              {countries.map(country => \n                <li key={country.name}>\n                  {country.name}\n                </li>)}\n            </ul>\n        </div> \n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}