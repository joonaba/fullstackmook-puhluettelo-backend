{"version":3,"sources":["components/PersonList.js","components/AddPersonForm.js","components/Filter.js","components/CountryList.js","services/person.js","services/country.js","components/ErrorMessage.js","App.js","serviceWorker.js","index.js"],"names":["PersonList","props","useState","name","person","number","id","onClick","deletePerson","AddPersonForm","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","newFilter","handleFilterChange","setShowAll","showAll","Countries","getAllCountries","axios","get","then","response","data","newObject","post","delete","Notification","message","className","App","persons","setPersons","countries","setCountries","setNewName","setNewNumber","setNewFilter","errorMessage","setErrorMessage","useEffect","console","log","personService","initialPersons","setTimeout","catch","error","personSearch","filter","event","target","preventDefault","personObject","map","includes","alert","addedPerson","concat","key","countryService","allCountries","country","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c910be0.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst PersonList = (props) => {\r\n    const [ newName, setNewName ] = useState('')\r\n    const [ newNumber, setNewNumber ] = useState('')\r\n\r\n    const name = props.person.name\r\n    const number = props.person.number\r\n    const id = props.person.id\r\n\r\n        return (\r\n          <div>\r\n            <p>{name} {number} <button onClick={() => props.deletePerson(id)}>delete</button></p>\r\n            \r\n        </div>\r\n              )\r\n  }\r\n\r\n  export default PersonList","import React, { useState } from 'react'\r\n\r\nconst AddPersonForm = (props) => {\r\n  \r\nreturn (\r\n    \r\n   \r\n    <form onSubmit={props.addPerson}>\r\n    <div>\r\n      name: <input\r\n      value={props.newName}\r\n      onChange={props.handleNameChange}\r\n      />\r\n      number: <input\r\n      value={props.newNumber}\r\n      onChange={props.handleNumberChange}\r\n      />\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n  </form>\r\n)\r\n}\r\n  export default AddPersonForm","import React, { useState } from 'react'\r\n\r\nconst Filter = (props) => {\r\n\r\n    return (\r\n    <div>\r\n      Search: <input\r\n          value={props.newFilter}\r\n          onChange={props.handleFilterChange}\r\n          />\r\n        <button onClick={() => props.setShowAll(!props.showAll)}>\r\n          search\r\n        </button>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React, { useState } from 'react'\r\n\r\nconst Countries = (props) => {\r\n\r\n\r\n  \r\n          return (\r\n            \r\n            <div>\r\n              <button onClick={() => props.getAllCountries()}>\r\n        Search country\r\n        </button>\r\n              \r\n              \r\n          </div>\r\n                )\r\n    \r\n\r\n}\r\n\r\nexport default Countries","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n\r\nconst getAll = () => {\r\n\r\n   const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst add = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    const request = axios.delete('/api/persons/'+id)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { \r\n    getAll: getAll, \r\n    add: add,\r\n    deletePerson: deletePerson\r\n  }","import axios from 'axios'\r\nconst baseUrl = 'https://restcountries.eu/rest/v2/all'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n   return request.then(response => response.data)\r\n}\r\n\r\n\r\n\r\nexport default { \r\n    getAll: getAll, \r\n\r\n  }","import React, { useState } from 'react'\r\nimport './error.css'\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification;","import React, { useState, useEffect } from 'react'\nimport PersonList from './components/PersonList.js'\nimport AddPersonForm from './components/AddPersonForm.js'\nimport Filter from './components/Filter.js'\nimport axios from 'axios'\nimport Countries from './components/CountryList.js'\nimport personService from './services/person.js'\nimport countryService from './services/country.js'\nimport Notification from './components/ErrorMessage.js'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ countries, setCountries] = useState([\n    \n  ]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ showAll, setShowAll ] = useState(true)\n  const [newFilter, setNewFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    console.log('effect')\n    personService\n      .getAll()\n      .then(initialPersons => {\n        console.log('promise fulfilled')\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const getAllCountries = () => {\n    countryService\n      .getAll()\n      .then(allCountries => {\n        setCountries(allCountries)\n      })\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    const allnames = persons.map(person => person.name)\n    const alreadyused = allnames.includes(newName)\n    \n    if (alreadyused === true){\n      alert(`${newName} is already added to phonebook`)\n  } else {\n    personService\n      .add(personObject)\n      .then(addedPerson => {\n        setPersons(persons.concat(addedPerson)) \n        setNewName('')\n        setErrorMessage(\n          `Added:'${newName}' to the server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n      \n  }\n  }\n\n  const deletePerson = (id) => {\n    console.log('tässä id' + id)\n    personService\n    \n      .deletePerson(id)\n      \n      personService\n        .getAll()\n        .then(initialPersons => {\n          console.log('promise fulfilled')\n          setPersons(initialPersons)\n          setErrorMessage(\n            `Person with id:'${id}' is deleted`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n        .catch(error => {\n       \n      })\n  }\n\n  const personSearch = showAll\n  ? persons\n  : persons.filter(person => person.name === newFilter)\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} setShowAll={setShowAll} showAll={showAll} />\n\n      <h2>Add person</h2>\n\n      <AddPersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange}/>\n      \n      <h2>Numbers</h2>\n      <div>\n      <ul>\n     {personSearch.map(person => \n      <li key={person.name}>\n         <PersonList person={person} deletePerson={deletePerson} />\n         \n      </li>)}\n    </ul>\n      </div>\n      <h2>Countries</h2>\n      \n        <Countries  getAllCountries={getAllCountries}/>\n        <ul>\n     {countries.map(country => \n      <li key={country.name}>\n         {country.name}\n      </li>)}\n    </ul>\n        \n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}